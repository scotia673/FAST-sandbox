import { ColorRGBA64 } from "@microsoft/fast-colors";
import { DesignSystemResolver } from "../fast-design-system";
/**
 * Describes the format of a single color in a palette
 */
export declare type Swatch = string;
/**
 * Interface describing a family of swatches.
 */
export interface SwatchFamily {
    /**
     * The swatch to apply to the rest state
     */
    rest: Swatch;
    /**
     * The swatch to apply to the hover state
     */
    hover: Swatch;
    /**
     * The swatch to apply to the active state
     */
    active: Swatch;
    /**
     * The swatch to apply to the focus state
     */
    focus: Swatch;
}
/**
 * Interface describing a family of swatches applied as fills
 */
export interface FillSwatchFamily extends SwatchFamily {
    /**
     * The swatch to apply to the selected state
     */
    selected: Swatch;
}
/**
 * A DesignSystemResolver that resolves a Swatch
 */
export declare type SwatchResolver = DesignSystemResolver<Swatch>;
/**
 * A function that accepts a design system and resolves a SwatchFamily or FillSwatchFamily
 */
export declare type SwatchFamilyResolver<T extends SwatchFamily = SwatchFamily> = DesignSystemResolver<T>;
/**
 * A function type that resolves a Swatch from a SwatchResolver
 * and applies it to the backgroundColor property of the design system
 * of the returned DesignSystemResolver
 * @internal
 */
export declare type DesignSystemResolverFromSwatchResolver<T> = (resolver: SwatchResolver) => DesignSystemResolver<T>;
/**
 * A function type that resolves a Swatch from a string literal
 * and applies it to the backgroundColor property of the design system
 * of the returned DesignSystemResolver
 */
export declare type DesignSystemResolverFromSwatch<T> = (colorLiteral: string) => DesignSystemResolver<T>;
/**
 * The states that a swatch can have
 * @internal
 */
export declare enum SwatchFamilyType {
    rest = "rest",
    hover = "hover",
    active = "active",
    focus = "focus",
    selected = "selected"
}
/**
 * A function that resolves a color when provided a design system
 * or resolves a ColorRecipe when provided a SwatchResolver
 */
export declare type ColorRecipe<T> = DesignSystemResolver<T> & DesignSystemResolverFromSwatchResolver<T> & DesignSystemResolverFromSwatch<T>;
/**
 * @internal
 */
export declare function colorRecipeFactory<T>(recipe: DesignSystemResolver<T>): ColorRecipe<T>;
/**
 * A function to apply a named style or recipe. A ColorRecipe has several behaviors:
 * 1. When provided a callback function or a string literal, the color Recipe returns a function that expects a design-system.
 * When called, the returned function will call the callback function with the input design-system and apply
 * the result of that function as background to the recipe. This is useful for applying text recipes to colors
 * other than the design system backgroundColor
 * 2. When provided a design system, the recipe will use that design-system to generate the color
 */
export declare type SwatchRecipe = ColorRecipe<Swatch>;
/**
 * Helper function to transform a SwatchFamilyResolver into simple ColorRecipe for simple use
 * use in stylesheets.
 *
 * @internal
 */
export declare function swatchFamilyToSwatchRecipeFactory<T extends SwatchFamily>(type: keyof T, callback: SwatchFamilyResolver<T>): SwatchRecipe;
/**
 * Converts a color string into a ColorRGBA64 instance.
 * Supports #RRGGBB and rgb(r, g, b) formats
 *
 * @public
 */
export declare const parseColorString: (color: string) => ColorRGBA64;
/**
 * Determines if a string value represents a color
 * Supports #RRGGBB and rgb(r, g, b) formats
 * @internal
 */
export declare function isValidColor(color: string): boolean;
/**
 * Determines if a color string matches another color.
 * Supports #RRGGBB and rgb(r, g, b) formats
 * @internal
 */
export declare function colorMatches(a: string, b: string): boolean;
/**
 * Returns the contrast value between two color strings.
 * Supports #RRGGBB and rgb(r, g, b) formats.
 * @internal
 */
export declare const contrast: (a: string, b: string) => number;
/**
 * Returns the relative luminance of a color. If the value is not a color, -1 will be returned
 * Supports #RRGGBB and rgb(r, g, b) formats
 * @internal
 */
export declare function luminance(color: string): number;
/**
 * @internal
 */
export declare function designSystemResolverMax(...args: Array<DesignSystemResolver<number>>): DesignSystemResolver<number>;
/**
 * @internal
 */
export declare const clamp: (value: number, min: number, max: number) => number;
