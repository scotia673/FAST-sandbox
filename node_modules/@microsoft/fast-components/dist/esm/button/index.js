import { __decorate } from "tslib";
import { attr, customElement } from "@microsoft/fast-element";
import { Button, ButtonTemplate as template } from "@microsoft/fast-foundation";
import { ButtonStyles as styles } from "./button.styles";
/**
 * The FAST Button Element. Implements {@link @microsoft/fast-foundation#Button},
 * {@link @microsoft/fast-foundation#ButtonTemplate}
 *
 *
 * @public
 * @remarks
 * HTML Element: \<fast-button\>
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
let FASTButton = class FASTButton extends Button {
    connectedCallback() {
        super.connectedCallback();
        if (!this.appearance) {
            this.appearance = "neutral";
        }
    }
    /**
     * Applies 'icon-only' class when there is only an SVG in the default slot
     *
     * @public
     * @remarks
     */
    defaultSlottedContentChanged(oldValue, newValue) {
        const slottedElements = this.defaultSlottedContent.filter(x => x.nodeType === Node.ELEMENT_NODE);
        if (slottedElements.length === 1 && slottedElements[0] instanceof SVGElement) {
            this.control.classList.add("icon-only");
        }
        else {
            this.control.classList.remove("icon-only");
        }
    }
};
__decorate([
    attr
], FASTButton.prototype, "appearance", void 0);
FASTButton = __decorate([
    customElement({
        name: "fast-button",
        template,
        styles,
        shadowOptions: {
            delegatesFocus: true,
        },
    })
], FASTButton);
export { FASTButton };
/**
 * Styles for Button
 * @public
 */
export const ButtonStyles = styles;
