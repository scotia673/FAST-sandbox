import { evaluateDesignSystemResolver } from "../fast-design-system";
import { backgroundColor } from "../fast-design-system";
import { findSwatchIndex, getSwatch, isDarkMode, minContrastTargetFactory, referenceColorInitialIndexResolver, swatchByContrast, } from "./palette";
function indexToSwatchFamily(accessibleIndex, palette, direction, restDelta, hoverDelta, activeDelta, focusDelta) {
    // One of the indexes will be rest, the other will be hover. Depends on the offsets and the direction.
    const accessibleIndex2 = accessibleIndex + direction * Math.abs(restDelta - hoverDelta);
    const indexOneIsRestState = direction === 1
        ? restDelta < hoverDelta
        : direction * restDelta > direction * hoverDelta;
    const restIndex = indexOneIsRestState ? accessibleIndex : accessibleIndex2;
    const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex;
    const activeIndex = restIndex + direction * activeDelta;
    const focusIndex = restIndex + direction * focusDelta;
    return {
        rest: getSwatch(restIndex, palette),
        hover: getSwatch(hoverIndex, palette),
        active: getSwatch(activeIndex, palette),
        focus: getSwatch(focusIndex, palette),
    };
}
/**
 * Function to derive accessible colors from contrast and delta configuration.
 * Performs a simple contrast check against the colors and returns
 * the color that has the most contrast against the background. If contrast
 * cannot be retrieved correctly, function returns black.
 * @internal
 */
export function accessibleAlgorithm(palette, minContrast, restDelta, hoverDelta, activeDelta, focusDelta) {
    return (designSystem) => {
        const resolvedPalette = evaluateDesignSystemResolver(palette, designSystem);
        const direction = isDarkMode(designSystem) ? -1 : 1;
        const accessibleSwatch = swatchByContrast(backgroundColor // Compare swatches against the background
        )(resolvedPalette // Use the provided palette
        )(referenceColorInitialIndexResolver // Begin searching from the background color
        )(() => direction // Search direction based on light/dark mode
        )(minContrastTargetFactory(evaluateDesignSystemResolver(minContrast, designSystem)) // A swatch is only valid if the contrast is greater than indicated
        )(designSystem // Pass the design system
        );
        const accessibleIndex = findSwatchIndex(palette, accessibleSwatch)(designSystem);
        const resolvedRest = evaluateDesignSystemResolver(restDelta, designSystem);
        const resolvedHover = evaluateDesignSystemResolver(hoverDelta, designSystem);
        const resolvedActive = evaluateDesignSystemResolver(activeDelta, designSystem);
        const resolvedFocus = evaluateDesignSystemResolver(focusDelta, designSystem);
        return indexToSwatchFamily(accessibleIndex, resolvedPalette, direction, resolvedRest, resolvedHover, resolvedActive, resolvedFocus);
    };
}
