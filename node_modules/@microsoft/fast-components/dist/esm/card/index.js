import { __decorate } from "tslib";
import { parseColorHexRGB } from "@microsoft/fast-colors";
import { attr, customElement, Observable } from "@microsoft/fast-element";
import { designSystemProperty, DesignSystemProvider, CardTemplate as template, } from "@microsoft/fast-foundation";
import { createColorPalette, neutralFillCard } from "../color";
import { CardStyles as styles } from "./card.styles";
const paletteCache = new Map();
/**
 * The FAST Card Element. Implements {@link @microsoft/fast-foundation#Card},
 * {@link @microsoft/fast-foundation#CardTemplate}
 *
 *
 * @public
 * @remarks
 * HTML Element: \<fast-card\>
 */
let FASTCard = class FASTCard extends DesignSystemProvider {
    cardBackgroundColorChanged(prev, next) {
        if (next) {
            const parsedColor = parseColorHexRGB(this.cardBackgroundColor);
            if (parsedColor !== null) {
                if (paletteCache.has(parsedColor)) {
                    this.neutralPalette = paletteCache.get(parsedColor);
                }
                else {
                    const neutralPalette = createColorPalette(parsedColor);
                    paletteCache.set(parsedColor, neutralPalette);
                    this.neutralPalette = neutralPalette;
                }
                this.backgroundColor = this.cardBackgroundColor;
            }
        }
        else if (this.provider && this.provider.designSystem) {
            this.handleChange(this.provider.designSystem, "backgroundColor");
        }
    }
    /**
     * @internal
     */
    handleChange(source, name) {
        if (!this.cardBackgroundColor) {
            this.backgroundColor = neutralFillCard(source);
        }
    }
    connectedCallback() {
        var _a, _b;
        super.connectedCallback();
        const parentDSNotifier = Observable.getNotifier((_a = this.provider) === null || _a === void 0 ? void 0 : _a.designSystem);
        parentDSNotifier.subscribe(this, "backgroundColor");
        parentDSNotifier.subscribe(this, "neutralPalette");
        this.handleChange((_b = this.provider) === null || _b === void 0 ? void 0 : _b.designSystem, "backgroundColor");
    }
};
__decorate([
    designSystemProperty({
        attribute: false,
        cssCustomProperty: "background-color",
        default: "#FFFFFF",
    })
], FASTCard.prototype, "backgroundColor", void 0);
__decorate([
    attr({
        attribute: "card-background-color",
    })
], FASTCard.prototype, "cardBackgroundColor", void 0);
__decorate([
    designSystemProperty({
        attribute: false,
        default: createColorPalette(parseColorHexRGB("#FFFFFF")),
        cssCustomProperty: false,
    })
], FASTCard.prototype, "neutralPalette", void 0);
FASTCard = __decorate([
    customElement({
        name: "fast-card",
        template,
        styles,
    })
], FASTCard);
export { FASTCard };
/**
 * Styles for Card
 * @public
 */
export const CardStyles = styles;
